{
    "HTML": {
        "assets": "",
        "description": [
            {
                "id": 1,
                "code": "",
                "link": [
                    "https://developer.mozilla.org/ru/docs/Learn/Getting_started_with_the_web/HTML_basics"
                ],
                "question": "Что такое HTML?",
                "answer": "HTML (от английского HyperText Markup Language) — это язык гипертекстовой разметки текста. Он используется для создания структуры и содержания веб-страниц."
            },
            {
                "id": 2,
                "code": "",
                "link": [
                    "http://www.astro.spbu.ru/staff/afk/Teaching/Help/Tegs.htm"
                ],
                "question": "Какие основные теги используются в HTML?",
                "answer": "Основные теги в HTML включают:\n1. <html>\n2. <head>\n3. <title>\n4. <body>\n5. <h1>-<h6> (заголовки)\n6. <p> (параграф)\n7. <a> (ссылка)\n8. <img> (изображение)\n9. <ul>\t<ol> (списки)\n10. <div> (контейнер)\nИ многие другие."
            },
            {
                "id": 3,
                "code": "",
                "link": [
                    "https://medium.com/maddevs-io/semanticheskie-tegi-html-5acfcb964ab7#:~:text=%D0%A7%D1%82%D0%BE%20%D1%82%D0%B0%D0%BA%D0%BE%D0%B5%20%D1%81%D0%B5%D0%BC%D0%B0%D0%BD%D1%82%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D0%B5%20%D1%82%D0%B5%D0%B3%D0%B8,%D0%B8%D0%BD%D1%84%D0%BE%D1%80%D0%BC%D0%B0%D1%86%D0%B8%D0%B8%20%D0%B7%D0%B0%D0%BB%D0%BE%D0%B6%D0%B5%D0%BD%20%D0%B2%20%D0%B4%D0%B0%D0%BD%D0%BD%D1%8B%D1%85%20%D1%82%D0%B5%D0%B3%D0%B0%D1%85."
                ],
                "question": "Что такое семантические теги в HTML?",
                "answer": "Семантические теги в HTML определяют значение и цель содержимого на веб-странице.\nПримеры семантических тегов:\n• <header>\n• <main>\n• <nav>\n• <section>\n• <article>\n• <aside>\n• <footer>"
            },
            {
                "id": 4,
                "code": "<img src=\"image.jpg\" alt=\"Описание изображения\" width=\"500\" height=\"300\">",
                "link": [
                    "https://developer.mozilla.org/ru/docs/Web/HTML/Attributes"
                ],
                "question": "Что такое атрибуты в HTML?",
                "answer": "Атрибуты в HTML используются для предоставления дополнительной информации об элементах. Они размещаются внутри открывающего тега и определяют различные свойства элемента, такие как ссылки, стили, идентификаторы и т.д."
            },
            {
                "id": 5,
                "code": "",
                "link": [
                    "https://sky.pro/wiki/html/razlichie-mezhdu-html-elementami-div-i-span/"
                ],
                "question": "Какая разница между <div> и <span> в HTML?",
                "answer": "• <div> является блочным элементом, который начинается с новой строки и занимает всю доступную ширину.\n• <span> является строчным элементом, который не начинается с новой строки и занимает только необходимое пространство."
            },
            {
                "id": 6,
                "code": "",
                "link": [
                    "https://timeweb.com/ru/community/articles/chto-takoe-meta-tegi"
                ],
                "question": "Что такое мета-теги? На что они влияют?",
                "answer": "Метатеги — это элементы HTML-кода веб-страницы: технические теги и SEO-теги (title, description, keywords). Косвенно влияют на продвижение сайта и поисковую выдачу."
            },
            {
                "id": 7,
                "code": "",
                "link": [
                    "https://developer.mozilla.org/ru/docs/Web/HTML/Element"
                ],
                "question": "Какую функцию выполняет элемент DOCTYPE?",
                "answer": "Элемент <!DOCTYPE> предназначен для указания типа текущего документа — DTD (document type definition, описание типа документа). Это необходимо, чтобы браузер понимал, как следует интерпретировать текущую веб-страницу."
            },
            {
                "id": 8,
                "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n</head>\n<body>\n\n</body>\n</html>",
                "link": [
                    "https://sky.pro/media/kak-sozdat-bazovuyu-strukturu-html/"
                ],
                "question": "Опишите структуру макета HTML.",
                "answer": "1. <!DOCTYPE html>: Определяет тип документа как HTML5.\n2. <html>: Корневой элемент HTML-документа.\n3. <head>: Секция с метаинформацией, такой как заголовок и метаданные.\n4. <body>: Содержит видимое содержимое веб-страницы."
            },
            {
                "id": 9,
                "code": "",
                "link": [
                    "https://dzen.ru/a/W7T3na6zTwCpMUVw"
                ],
                "question": "Для чего предназначены теги head и body?",
                "answer": "• Тег <head> в HTML используется для определения метаданных документа, таких как заголовок страницы, описание, ключевые слова, ссылки на внешние файлы стилей, скрипты и другие данные, которые не отображаются на самой веб-странице, но влияют на её поведение и внешний вид.\n• Тег <body> в HTML используется для определения содержимого веб-страницы."
            },
            {
                "id": 10,
                "code": "",
                "link": [
                    "https://ru.hexlet.io/courses/html/lessons/html_terms/theory_unit"
                ],
                "question": "Что такое теги и атрибуты?",
                "answer": "Теги - это основные элементы HTML, используемые для создания и разметки контента на веб-странице. Атрибуты - это дополнительные параметры внутри тегов, которые предоставляют дополнительную информацию о элементе, например, классы, идентификаторы, ссылки и стили."
            },
            {
                "id": 11,
                "code": "",
                "link": [
                    "https://sky.pro/wiki/html/skripty-v-html-v-head-ili-body-dlya-luchshey-funktsionalnosti/"
                ],
                "question": "Подключение script в head и body",
                "answer": "Если скрипты не нуждаются в доступе к DOM, используйте <script defer> внутри тега <head>. Скрипты будут загружаться асинхронно во время просмотра страницы и запускаться после её разбора. Если скрипты взаимодействуют с DOM, поместите <script> непосредственно перед закрывающим тегом </body>. Это обеспечит их подключение после полной загрузки HTML и гарантирует корректность работы с DOM."
            }
        ]
    },
    "CSS": {
        "assets": "",
        "description": [
            {
                "id": 12,
                "code": "",
                "link": [
                    ""
                ],
                "question": "Какие селекторы есть в CSS?",
                "answer": "Базовые селекторы:\n1. Селекторы по тегу(div, p, a и т.д.).\n2. Классовые селекторы (.className).\n3. Идентификаторные селекторы (#idName).\n4. Универсальный селектор (*)."
            },
            {
                "id": 12,
                "code": "",
                "link": [
                    ""
                ],
                "question": "Приоритет селекторов в CSS:",
                "answer": "1. Селектор по идентификатору (#blue)\n2. Селектор по классу (.red)\n3.Селектор по тегу (p)\n\nГде 1 — самый высокий приоритет, а 3 — самый низкий."
            },
            {
                "id": 13,
                "code": "",
                "link": [
                    "https://html5book.ru/osnovy-flexbox/"
                ],
                "question": "Что такое Flexbox в CSS?",
                "answer": "Flexbox (Flexible Box Layout Module) — это модуль CSS, который предоставляет более эффективный способ управления расположением элементов в контейнере. Он определяет гибкий способ организации и управления пространством между элементами, даже если их размеры изменяются или их количество неизвестно."
            },
            {
                "id": 14,
                "code": "display: flex; /* или inline-flex */\n\nflex-direction: row; /* или row-reverse, column, column-reverse */\n\nflex-wrap: nowrap; /* или wrap, wrap-reverse */\n\nflex-flow: row wrap;\n\njustify-content: flex-start; /* или flex-end, center, space-between, space-around, space-evenly */\n\nalign-items: stretch; /* или flex-start, flex-end, center, baseline */\n\nalign-content: stretch; /* или flex-start, flex-end, center, space-between, space-around, space-evenly */\n\norder: 1; /* Значение по умолчанию 0 */\n\nflex-grow: 1; /* Значение по умолчанию 0 */\n\nflex-shrink: 1; /* Значение по умолчанию 1 */\n\nflex-basis: auto; /* или конкретное значение, например, 100px */\n\nflex: 1 1 auto; /* или например, flex: 2 1 0; */\n\nalign-self: auto; /* или flex-start, flex-end, center, baseline, stretch */",
                "link": [
                    "https://html5book.ru/osnovy-flexbox/"
                ],
                "question": "Какие свойства включает Flexbox в CSS?",
                "answer": "1. display: Устанавливает контейнер как flex-контейнер.\n2. flex-direction: Определяет направление главной оси (по которой выстраиваются flex-элементы).\n3. flex-wrap: Определяет, должны ли flex-элементы переноситься на новую строку.\n4. flex-flow: Краткая запись для flex-direction и flex-wrap.\n5. justify-content: Выравнивает flex-элементы вдоль главной оси.\n6. align-items: Выравнивает flex-элементы вдоль поперечной оси.\n7.align-content: Выравнивает строки flex-элементов вдоль поперечной оси (при наличии нескольких строк).\n8. order: Определяет порядок отображения flex-элементов.\n9. flex-grow: Определяет, как flex-элемент будет расти относительно других flex-элементов.\n10. flex-shrink: Определяет, как flex-элемент будет сжиматься относительно других flex-элементов.\n11.flex-basis: Определяет начальный размер flex-элемента до распределения свободного пространства.\n12. flex: Краткая запись для flex-grow, flex-shrink и flex-basis.\n13. align-self: Переопределяет значение align-items для конкретного flex-элемента."
            },
            {
                "id": 15,
                "code": "",
                "link": [
                    "https://html5book.ru/css-grid/"
                ],
                "question": "Что такое CSS Grid Layout?",
                "answer": "CSS Grid Layout — это двумерная система разметки, которая позволяет разработчикам создавать сложные макеты и контролировать их структуру с помощью CSS. Она предоставляет возможность создавать сетки с заданными колонками и строками, а также позиционировать элементы в этих ячейках."
            },
            {
                "id": 15,
                "code": "",
                "link": [
                    "https://html5book.ru/css-grid/"
                ],
                "question": "Чем CSS Grid Layout отличается от Flexbox?",
                "answer": "Ориентация и направление раскладки:\nFlexbox: Ориентирован на одномерные раскладки (строки или столбцы). Основное внимание уделяется упорядочиванию элементов вдоль одной оси (горизонтальной или вертикальной).\nGrid: Ориентирован на двумерные раскладки. Позволяет контролировать размещение элементов как вдоль горизонтальной, так и вдоль вертикальной осей одновременно.\n\nСложность структуры:\nFlexbox: Прост в использовании для создания одномерных макетов.\nGrid: Предоставляет более сложные возможности для создания двумерных сеток, что делает его более мощным инструментом для сложных макетов."
            },
            {
                "id": 16,
                "code": "",
                "link": [
                    ""
                ],
                "question": "Как работает позиционирование в CSS?",
                "answer": "Позиционирование в CSS определяет способ, которым элементы размещаются на веб-странице.\nОсновные методы позиционирования включают:\n• static (позиция элемента по умолчанию)\n• relative (позиционирование относительно исходного местоположения)\n• absolute (позиционирование относительно ближайшего позиционированного предка)\n• fixed (позиционирование относительно вьюпорта)\n• sticky (позиционирование, которое прилипает к границе родительского элемента при прокрутке)."
            },
            {
                "id": 18,
                "code": "",
                "link": [
                    ""
                ],
                "question": "Что такое псевдоэлементы в CSS?",
                "answer": "Псевдоэлементы в CSS позволяют создавать виртуальные элементы на странице, которые можно стилизовать с помощью CSS. Они используются для добавления декоративных элементов или изменения стиля части элемента без добавления лишних узлов в DOM.\nОсновные типы псевдоэлементов:\n1. ::before: Добавляет содержимое до указанного элемента.\n 2. ::after: Добавляет содержимое после указанного элемента.\n3. ::first-line: Применяет стили к первой строке текста в указанном элементе.\n4. ::first-letter: Применяет стили к первой букве текста в указанном элементе.\n5. ::placeholder: Применяет стили к тексту placeholder в элементах формы (например, <input> или <textarea>)."
            },
            {
                "id": 19,
                "code": "",
                "link": [
                    ""
                ],
                "question": "Что такое псевдоклассы в CSS?",
                "answer": "Псевдоклассы в CSS используются для добавления стилей к элементам в зависимости от их текущего состояния или позиции в DOM.\n\nСостояния ссылок:\n1. :hover — применяется к элементу при наведении на него курсора мыши.\n2. :active — применяется к элементу во время активации, например, когда пользователь нажимает на ссылку.\n3. :visited — применяется к ссылкам, которые уже были посещены пользователем.\n4. :link — применяется к ссылкам, которые ещё не были посещены.\n\nФормы и элементы ввода:\n1. :focus — применяется к элементу в фокусе, например, когда пользователь кликает на текстовое поле для ввода.\n 2. :checked — применяется к отмеченным элементам, таким как чекбоксы или радиокнопки.\n\nДочерние и соседние элементы:\n1. :first-child — применяется к первому дочернему элементу указанного родительского элемента.\n2. :last-child — применяется к последнему дочернему элементу указанного родительского элемента.\n3. :nth-child() — применяется к элементу, который является n-м дочерним элементом указанного родительского элемента (может быть использовано с числами, формулами и ключевыми словами).\n\nСостояния формы:\n1. :disabled — применяется к элементам формы, которые находятся в отключенном состоянии.\n2. :enabled — применяется к элементам формы, которые находятся в активном (включенном) состоянии."
            },
            {
                "id": 20,
                "code": "",
                "link": [
                    ""
                ],
                "question": "Как использовать медиазапросы в CSS?",
                "answer": "Медиазапросы в CSS позволяют изменять стили элементов в зависимости от различных аспектов окружающей среды, таких как ширина окна браузера, тип устройства или ориентация экрана. Они используются для создания адаптивных и отзывчивых веб-страниц, которые корректно отображаются на различных устройствах и в различных условиях."
            },
            {
                "id": 23,
                "code": "",
                "link": [
                    ""
                ],
                "question": "Как использовать переменные в CSS?",
                "answer": "Переменные в CSS позволяют определять и использовать многократно используемые значения, такие как цвета, размеры или другие свойства. Они объявляются с помощью ключевого слова var() и могут быть использованы внутри правил стилей для упрощения обновления и поддержки."
            },
            {
                "id": 24,
                "code": "",
                "link": [
                    ""
                ],
                "question": "Как организовать CSS-код для больших проектов?",
                "answer": "Организация CSS-кода для больших проектов включает в себя использование методологий (например, BEM, SMACSS), разделение стилей на модули или компоненты, оптимизацию и минимизацию кода, а также использование сборщиков или препроцессоров CSS для автоматизации процесса."
            }
        ]
    },
    "JavaScript": {
        "assets": "",
        "description": [
            {
                "id": 1,
                "code": "",
                "link": [
                    "https://developer.mozilla.org/ru/docs/Learn/Getting_started_with_the_web/JavaScript_basics"
                ],
                "question": "Что такое JavaScript?",
                "answer": "JavaScript — это высокоуровневый интерпретируемый язык программирования, который применяется веб-разработкой для создания интерактивных элементов на веб-страницах.\n\nС развитием JavaScript появились различные фреймворки и библиотеки (например, React, Angular, Vue.js), которые упрощают разработку сложных веб-приложений и SPA (Single Page Application). JavaScript также находит применение в разработке серверных приложений (Node.js), мобильных приложений и даже настольных приложений (Electron)."
            },
            {
                "id": 2,
                "code": "",
                "link": [
                    "https://learn.javascript.ru/intro"
                ],
                "question": "Какие основные возможности JavaScript?",
                "answer": "JavaScript включает динамическую типизацию данных, поддержку ООП, функциональное программирование, возможность работы с асинхронным кодом, манипуляции DOM (Document Object Model) и многое другое."
            },
            {
                "id": 3,
                "code": "",
                "link": [
                    ""
                ],
                "question": "Преимущества JavaScript:",
                "answer": "1. Важен для веб-разработки, обеспечивает клиент-серверные модели.\n2. Интегрируется легко с версткой и сервером.\n3. Прост в использовании и решении задач.\n4. Обеспечивает скорость работы и производительность.\n5. Удобен для создания интерфейсов.\n6. Обладает мощной экосистемой с фреймворками."
            },
            {
                "id": 4,
                "code": "",
                "link": [
                    ""
                ],
                "question": "ECMAScript:",
                "answer": "Стандарт, определяющий синтаксис и функциональность JavaScript."
            },
            {
                "id": 5,
                "code": "",
                "link": [
                    ""
                ],
                "question": "Директива \"use strict\":",
                "answer": "Устанавливает строгий режим выполнения кода, запрещает определенные практики.\n\nСтрогий режим (Strict mode) в JavaScript вводит новые правила для исполнения кода, улучшая его безопасность, предсказуемость и эффективность.\n\nОсновные изменения, которые вносит строгий режим:\n• Запрет использования необъявленных переменных: В строгом режиме переменные должны быть объявлены перед использованием.\n• Запрет удаления некоторых свойств: Нельзя удалять свойства, объявленные как невозможные для удаления (configurable: false).\n• Запрет переопределения некоторых свойств: Нельзя переопределять некоторые встроенные свойства, например, undefined, NaN, Infinity.\n• Запрет использования зарезервированных слов в качестве идентификаторов: Например, eval, arguments.\n• Запрет совершения ошибок в eval(): Переменные и функции, созданные внутри eval, не будут видны за его пределами.\n• Усиление семантики this: Запрещены некоторые проблемные конструкции с this, например, this в глобальной области видимости ссылается на undefined, а не на глобальный объект.\n• Более строгое исключение ошибок: Некоторые ситуации, которые раньше игнорировались или приводили к неопределённому поведению, теперь вызывают ошибки."
            },
            {
                "id": 2,
                "code": "",
                "link": [
                    ""
                ],
                "question": "Что такое переменные в JavaScript?",
                "answer": "Переменные в JavaScript используются для хранения данных. Они могут содержать значения различных типов данных, таких как строки, числа, логические значения, объекты и массивы. Переменные объявляются с помощью ключевых слов let, const или var (устаревшее)."
            },
            {
                "id": 20,
                "code": "",
                "link": [
                    ""
                ],
                "question": "Сравнение var, let, const:",
                "answer": "Var - функциональная или глобальная область видимости, let/const - блочная. В var работает переопределение, в let - перезапись, const - константа."
            },
            {
                "id": 21,
                "code": "",
                "link": [
                    ""
                ],
                "question": "Поднятие (Hoisting):",
                "answer": "Возможность интерпретатора работать с переменными и функциями до их объявления."
            },
            {
                "id": 6,
                "code": "",
                "link": [
                    ""
                ],
                "question": "Типы данных в JavaScript:",
                "answer": "Числа, строки, булевы значения, null, undefined, символы и объекты."
            },
            {
                "id": 7,
                "code": "",
                "link": [
                    ""
                ],
                "question": "Отличие примитивов от объектов:",
                "answer": "Примитивы - неизменяемые, объекты - изменяемые."
            },
            {
                "id": 9,
                "code": "",
                "link": [
                    ""
                ],
                "question": "Мутабельность/Иммутабельность:",
                "answer": "Примитивы - неизменяемые, объекты - изменяемые."
            },
            {
                "id": 12,
                "code": "",
                "link": [
                    ""
                ],
                "question": "Отличие массива от объекта:",
                "answer": "Массив упорядочен, с элементами по индексам, объект неупорядочен, с ключами и значениями."
            },
            {
                "id": 13,
                "code": "",
                "link": [
                    ""
                ],
                "question": "Разница между null и undefined:",
                "answer": "Undefined - значение неопределено, null - явно пустое значение."
            },
            {
                "id": 14,
                "code": "",
                "link": [
                    ""
                ],
                "question": "Операторы JS:",
                "answer": "Арифметические, сравнения, логические, присваивания."
            },
            {
                "id": 15,
                "code": "",
                "link": [
                    ""
                ],
                "question": "Оператор \"&&\":",
                "answer": "Возвращает первое ложное значение или последний операнд."
            },
            {
                "id": 16,
                "code": "",
                "link": [
                    ""
                ],
                "question": "Оператор \"||\":",
                "answer": "Возвращает первое истинное значение."
            },
            {
                "id": 17,
                "code": "",
                "link": [
                    ""
                ],
                "question": "Разница между \"==\" и \"===\":",
                "answer": "\"==\" сравнивает на равенство с приведением типов, \"===\" сравнивает на идентичность без приведения."
            },
            {
                "id": 18,
                "code": "",
                "link": [
                    ""
                ],
                "question": "Инкремент и декремент:",
                "answer": "Увеличивают/уменьшают значение на единицу. Разница в порядке получения значения."
            },
            {
                "id": 19,
                "code": "",
                "link": [
                    ""
                ],
                "question": "Область видимости:",
                "answer": "Часть программы, где доступны переменные, функции и объекты."
            },
            {
                "id": 22,
                "code": "",
                "link": [
                    ""
                ],
                "question": "Ложные значения в JS:",
                "answer": "false, 0, -0, 0n, '', null, undefined, NaN."
            },
            {
                "id": 23,
                "code": "",
                "link": [
                    ""
                ],
                "question": "Явное и неявное приведение типов:",
                "answer": "Явное - указываем тип явно, неявное - автоматическое приведение."
            },
            {
                "id": 24,
                "code": "",
                "link": [
                    ""
                ],
                "question": "Проверка четности числа:",
                "answer": "Проверяем последний бит числа на равенство нулю."
            },
            {
                "id": 25,
                "code": "",
                "link": [
                    ""
                ],
                "question": "Методы массивов:",
                "answer": "1. push(): Добавляет один или более элементов в конец массива и возвращает новую длину массива.\n2. pop(): Удаляет последний элемент из массива и возвращает его значение.\n3. shift(): Удаляет первый элемент из массива и возвращает его значение, сдвигая все остальные элементы на одну позицию влево.\n4. unshift(): Добавляет один или более элементов в начало массива и возвращает новую длину массива, сдвигая все существующие элементы на одну позицию вправо.\n5. slice(): Возвращает новый массив, содержащий копию части исходного массива, определенной начальным и конечным индексами (не включая конечный).\n6. splice(): Изменяет содержимое массива, удаляя существующие элементы и/или добавляя новые элементы.\n7. join(): Соединяет все элементы массива в строку, разделенную указанным разделителем, и возвращает эту строку.\n8. reverse(): Изменяет порядок элементов массива на обратный и возвращает измененный массив.\n9. sort(): Сортирует элементы массива на месте в соответствии с порядком, определяемым переданной функцией сравнения или по умолчанию в алфавитном порядке."
            },
            {
                "id": 26,
                "code": "",
                "link": [
                    ""
                ],
                "question": "Методы перебора массива:",
                "answer": "1. forEach(): Вызывает функцию обратного вызова для каждого элемента массива.\n2. map(): Создает новый массив, содержащий результат вызова указанной функции для каждого элемента исходного массива.\n3. filter(): Создает новый массив, содержащий все элементы исходного массива, для которых функция фильтрации возвращает true.\n4. reduce(): Применяет функцию редукции к аккумулятору и каждому значению массива (слева направо), чтобы свести его к одному значению.\n5. some(): Проверяет, удовлетворяет ли хотя бы один элемент массива условию, заданному функцией проверки.\n6. every(): Проверяет, удовлетворяют ли все элементы массива условию, заданному функцией проверки."
            },
            {
                "id": 27,
                "code": "",
                "link": [
                    ""
                ],
                "question": "Spread-оператор и rest-оператор:",
                "answer": "Spread - расширяет массивы и объекты, rest - собирает аргументы функции в массив."
            },
            {
                "id": 28,
                "code": "",
                "link": [
                    ""
                ],
                "question": "Что такое функции в JavaScript?",
                "answer": "Функции в JavaScript являются блоками кода, которые могут быть вызваны для выполнения определенных задач. Они могут принимать входные параметры и возвращать значения. Функции способствуют модульности, повторному использованию кода и улучшают читаемость."
            }
        ]
    },
    "TypeScript": {
        "assets": "",
        "description": [
            {
                "id": 3,
                "code": "",
                "link": [
                    ""
                ],
                "question": "Что такое интерфейсы в TypeScript?",
                "answer": "Интерфейсы в TypeScript определяют структуру объектов, описывая их свойства и методы. Они обеспечивают контракт для реализации объектов и способствуют абстракции и модульности кода."
            },
            {
                "id": 4,
                "code": "",
                "link": [
                    ""
                ],
                "question": "Что такое дженерики в TypeScript?",
                "answer": "Дженерики в TypeScript позволяют создавать повторно используемый код, который может работать с различными типами данных. Они помогают избежать дублирования кода и обеспечивают большую гибкость и типобезопасность."
            },
            {
                "id": 5,
                "code": "",
                "link": [
                    ""
                ],
                "question": "Как TypeScript взаимодействует с JavaScript?",
                "answer": "TypeScript является надстройкой над JavaScript, поэтому любой корректный код JavaScript также является действительным кодом TypeScript. TypeScript компилируется в JavaScript, что позволяет использовать его с существующими библиотеками и фреймворками JavaScript."
            }
        ]
    },
    "React": {
        "assets": "",
        "description": [
            {
                "id": 1,
                "code": "",
                "link": [
                    ""
                ],
                "question": "Что такое React?",
                "answer": "React — это библиотека JavaScript для создания пользовательских интерфейсов. Она разработана Facebook и основана на концепции компонентов, которые позволяют создавать повторно используемые модули пользовательского интерфейса."
            },
            {
                "id": 2,
                "code": "",
                "link": [
                    ""
                ],
                "question": "Что такое компоненты в React?",
                "answer": "Компоненты в React — это небольшие, повторно используемые части кода, которые возвращают элементы React, описывающие то, что должно отображаться на экране. Компоненты могут иметь свое собственное состояние и обрабатывать события."
            },
            {
                "id": 3,
                "code": "",
                "link": [
                    ""
                ],
                "question": "Что такое состояние (state) в React?",
                "answer": "Состояние (state) в React — это внутренние данные компонента, которые могут изменяться в течение времени. Изменение состояния приводит к перерендерингу компонента и обновлению пользовательского интерфейса."
            },
            {
                "id": 4,
                "code": "",
                "link": [
                    ""
                ],
                "question": "Что такое props в React?",
                "answer": "Props (сокращение от \"properties\") в React — это входные данные, передаваемые в компонент из родительского компонента. Props позволяют создавать повторно используемые компоненты, которые получают различные данные из разных источников."
            },
            {
                "id": 5,
                "code": "",
                "link": [
                    ""
                ],
                "question": "Что такое виртуальный DOM в React?",
                "answer": "Виртуальный DOM (Virtual DOM) в React — это абстракция над реальным DOM браузера. React создает легковесное дерево виртуальных элементов и эффективно обновляет только те части реального DOM, которые изменились, что повышает производительность и оптимизирует обновления пользовательского интерфейса."
            }
        ]
    },
    "SQL": {
        "assets": "",
        "description": [
            {
                "id": 1,
                "code": "",
                "link": [
                    ""
                ],
                "question": "Что такое SQL?",
                "answer": "SQL (Structured Query Language) — это язык структурированных запросов, используемый для управления и манипулирования данными в реляционных базах данных."
            },
            {
                "id": 2,
                "code": "",
                "link": [
                    ""
                ],
                "question": "Какие основные команды SQL вы знаете?",
                "answer": "Основные команды SQL включают: SELECT (выбор данных), INSERT (добавление данных), UPDATE (обновление данных), DELETE (удаление данных), CREATE TABLE (создание таблицы), DROP TABLE (удаление таблицы), ALTER TABLE (изменение таблицы)."
            },
            {
                "id": 3,
                "code": "",
                "link": [
                    ""
                ],
                "question": "Что такое JOIN в SQL?",
                "answer": "JOIN в SQL позволяет объединять строки из двух или более таблиц на основе определенного условия. Существуют различные типы JOIN, такие как INNER JOIN, LEFT JOIN, RIGHT JOIN и FULL OUTER JOIN."
            },
            {
                "id": 4,
                "code": "",
                "link": [
                    ""
                ],
                "question": "Что такое индексы в SQL?",
                "answer": "Индексы в SQL являются специальными структурами данных, которые ускоряют поиск и извлечение данных из таблиц. Они создаются на одном или нескольких столбцах таблицы и позволяют быстро находить записи по индексированным значениям."
            },
            {
                "id": 5,
                "code": "",
                "link": [
                    ""
                ],
                "question": "Что такое транзакции в SQL?",
                "answer": "Транзакции в SQL позволяют группировать несколько операций в одну логическую единицу работы. Они гарантируют атомарность (все операции завершаются успешно или откатываются) и обеспечивают согласованность данных."
            }
        ]
    },
    "noSQL": {
        "assets": "",
        "description": [
            {
                "id": 1,
                "code": "",
                "link": [
                    ""
                ],
                "question": "Что такое NoSQL?",
                "answer": "NoSQL (Not only SQL) — это класс нереляционных баз данных, которые предоставляют механизмы хранения и извлечения данных, отличные от табличных реляционных баз данных."
            },
            {
                "id": 2,
                "code": "",
                "link": [
                    ""
                ],
                "question": "Какие типы NoSQL баз данных вы знаете?",
                "answer": "Основные типы NoSQL баз данных включают: базы данных типа \"ключ-значение\" (Redis, Memcached), документно-ориентированные базы данных (MongoDB, Couchbase), базы данных типа \"семейство столбцов\" (Cassandra, HBase), графовые базы данных (Neo4j, OrientDB)."
            },
            {
                "id": 3,
                "code": "",
                "link": [
                    ""
                ],
                "question": "Что такое схема в NoSQL базах данных?",
                "answer": "В NoSQL базах данных схема данных часто является гибкой и динамической, в отличие от жестких схем реляционных баз данных. Это позволяет легко изменять структуру данных без необходимости предварительного определения схемы."
            },
            {
                "id": 4,
                "code": "",
                "link": [
                    ""
                ],
                "question": "Какие преимущества NoSQL баз данных?",
                "answer": "Преимущества NoSQL баз данных включают в себя горизонтальную масштабируемость, высокую доступность, гибкую схему данных, улучшенную производительность для определенных рабочих нагрузок и поддержку больших объемов неструктурированных данных."
            },
            {
                "id": 5,
                "code": "",
                "link": [
                    ""
                ],
                "question": "В каких случаях следует использовать NoSQL базы данных?",
                "answer": "NoSQL базы данных подходят для приложений, требующих высокой масштабируемости, гибкой схемы данных, быстрого доступа к большим объемам неструктурированных дан"
            }
        ]
    },
    "Node.js": {
        "assets": "",
        "description": [
            {
                "id": 1,
                "code": "",
                "link": [
                    ""
                ],
                "question": "Что такое Node.js?",
                "answer": "Node.js — это кроссплатформенная среда выполнения JavaScript, основанная на движке V8 от Google Chrome. Она позволяет выполнять код JavaScript вне браузера и использовать его для создания серверных приложений, утилит командной строки и многого другого."
            },
            {
                "id": 2,
                "code": "",
                "link": [
                    ""
                ],
                "question": "Какие преимущества использования Node.js?",
                "answer": "Основные преимущества Node.js включают: масштабируемость (благодаря неблокирующей архитектуре ввода-вывода), высокую производительность, кросс-платформенность, использование JavaScript на стороне сервера, большое сообщество и экосистему модулей."
            },
            {
                "id": 3,
                "code": "",
                "link": [
                    ""
                ],
                "question": "Что такое модули в Node.js?",
                "answer": "Модули в Node.js — это повторно используемые блоки кода, которые инкапсулируют определенную функциональность. Node.js имеет свою систему модулей, позволяющую импортировать и экспортировать модули, что способствует модульности и организации кода."
            },
            {
                "id": 4,
                "code": "",
                "link": [
                    ""
                ],
                "question": "Что такое событийно-ориентированная архитектура в Node.js?",
                "answer": "Node.js использует событийно-ориентированную архитектуру, в которой операции ввода-вывода выполняются асинхронно и обрабатываются с помощью обратных вызовов или промисов. Это позволяет Node.js оставаться неблокирующим и масштабируемым."
            },
            {
                "id": 5,
                "code": "",
                "link": [
                    ""
                ],
                "question": "Какие популярные фреймворки для Node.js вы знаете?",
                "answer": "Популярные фреймворки для Node.js включают Express (веб-фреймворк), Socket.IO (фреймворк для реального времени), Nest.js (фреймворк для создания масштабируемых серверных приложений), Electron (фреймворк для создания кросс-платформенных настольных приложений)."
            }
        ]
    }
}